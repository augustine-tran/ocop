# Name of your application. Used to uniquely configure containers.
service: ocop

# Name of the container image.
image: ocop/ocop

# Deploy to these servers.
servers:
  web:
    hosts:
      - 103.20.102.121
    options:
      user: "1001:1001" # UID:GID of the user to run the container as. To allow write access to the mounted volumes.
    labels:
      traefik.enable: true
      traefik.http.routers.ocop-web.rule: Host(`app.ocop.site`)
      traefik.http.routers.ocop-web.tls: true
      traefik.http.routers.ocop-web.entrypoints: websecure
      traefik.http.routers.ocop-web.middlewares: ocop-web-retry,cf-warp@file

# Credentials for your image host.
registry:
  server: registry.digitalocean.com
  username:
    - DOCKER_REGISTRY_USERNAME
  password:
    - DOCKER_REGISTRY_TOKEN

# Inject ENV variables into containers (secrets come from .env).
# Remember to run `kamal env push` after making changes!
env:
  clear:
    RAILS_LOG_TO_STDOUT: 1
    PORT: 80
  secret:
    - RAILS_MASTER_KEY
    - MAILGUN_API_KEY

# Use a different ssh user than root
# ssh:
#   user: app

# Configure builder setup.
# builder:
#   args:
#     RUBY_VERSION: 3.2.0
#   secrets:
#     - GITHUB_TOKEN
#   remote:
#     arch: amd64
#     host: ssh://app@192.168.0.1
builder:
  # local:
  #   arch: arm64
  #   host: unix:///Users/<%= `whoami`.strip %>/.docker/run/docker.sock
  remote:
    arch: amd64
    host: ssh://root@103.20.102.121
    secrets:
      - RAILS_MASTER_KEY

# Make sure below directories exist on the server and chown them to the rails:rails user.
volumes:
  - "/opt/ocop/db/production:/rails/db/production"
  - "/opt/ocop/storage:/rails/storage"
  - "/opt/ocop/public/system:/rails/public/system"

# Use accessory services (secrets come from .env).
accessories:
# whoami:
#   # A container that exposes an API to show its IP address
#   image: traefik/whoami
#   hosts:
#     - 103.20.102.121
#   labels:
#     traefik.enable: true
#     traefik.http.routers.whoami.rule: Host(`whoami.ocop.site`)
#     traefik.http.routers.whoami.tls: true
#     traefik.http.routers.whoami.entrypoints: websecure
#   db:
#     image: mysql:8.0
#     host: 192.168.0.2
#     port: 3306
#     env:
#       clear:
#         MYSQL_ROOT_HOST: '%'
#       secret:
#         - MYSQL_ROOT_PASSWORD
#     files:
#       - config/mysql/production.cnf:/etc/mysql/my.cnf
#       - db/production.sql:/docker-entrypoint-initdb.d/setup.sql
#     directories:
#       - data:/var/lib/mysql
#   redis:
#     image: redis:7.0
#     host: 192.168.0.2
#     port: 6379
#     directories:
#       - data:/data

# Configure custom arguments for Traefik
traefik:
  options:
    publish:
      - 443:443
    volume:
      - ./certs:/etc/traefik/certs
      - ./traefik:/etc/traefik/config
  args:
    accesslog: true
    api.dashboard: true
    entrypoints.websecure.address: ":443"
    entrypoints.web.http.redirections.entryPoint.to: websecure
    providers.docker.exposedByDefault: false
    providers.file.directory: /etc/traefik/config
    providers.file.watch: true
    experimental.plugins.cloudflarewarp.modulename: github.com/BetterCorp/cloudflarewarp
    experimental.plugins.cloudflarewarp.version: v1.3.3
  labels:
    # https://traefik.ocop.site/dashboard/ The trailing slash / in /dashboard/ is mandatory
    traefik.enable: true
    traefik.http.routers.dashboard.rule: Host(`traefik.ocop.site`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))
    traefik.http.routers.dashboard.tls: true
    traefik.http.routers.dashboard.entrypoints: websecure
    traefik.http.routers.dashboard.service: api@internal
    traefik.http.routers.dashboard.middlewares: dashboard-auth,cf-warp@file
    traefik.http.middlewares.dashboard-auth.basicauth.users: admin:$2y$05$6UzIBrJY82Yd8o/I0WxVEuiBKM49ZSz8ddjLmFlpUWtTa7F5PmNrO

# Configure a custom healthcheck (default is /up on port 3000)
healthcheck:
  path: /up
  port: 80

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
asset_path: /rails/public/assets
# Configure rolling deploys by setting a wait time between batches of restarts.
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

# Configure the role used to determine the primary_host. This host takes
# deploy locks, runs health checks during the deploy, and follow logs, etc.
#
# Caution: there's no support for role renaming yet, so be careful to cleanup
#          the previous role on the deployed hosts.
primary_role: web
# Controls if we abort when see a role with no hosts. Disabling this may be
# useful for more complex deploy configurations.
#
# allow_empty_roles: false
